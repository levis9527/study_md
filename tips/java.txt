把文件打包成war包  jar -cvf  name.war *


idea导入多module项目时，可以把.idea文件夹删掉，然后点击maven project把相关项目的pom.xml添加进去


正则表达式
(?:)其中?:表示该括号内是非获取匹配，部分情况下需要使用 | 但是不需要获取匹配信息，就使用这个
.表示任意字符


java spi机制
个人理解是把相关接口实现类暴露给外部，约定外部从这里获取并实例化接口的实现
例如jdbc数据库驱动，有个java.sql.Driver文件，里面放Driver的实现com.mysql.jdbc.Driver
会让编码更加简单，方便不同服务之间解耦
以前jdbc需要Class.forName加载类触发里面静态方法来实例化Driver，现在可以让实现jdbc接口的驱动直接放个spi文件，调用方可以直接知道你的类名而且实例化更方便
spi文件放在META-INF/services目录，文件名放接口名字，调用方通过该接口获取，文件内容为实现类
通过ServiceLoader.load(IShout.class)获取实例集合


java MBean
可以把bean注册到MBean工厂，
创建一个接口命名为*MBean，然后创建实现类，命名为*（去掉MBean），然后就可以在jconsole等工具里找到MBean了
MBean有个规则，标准MBean名称必需是在要监控的类名后面加上“MBean”, 且要监控的类和MBean接口必需在同一包下


windows下手动编译整个项目
dir /s /b *.java > sources.txt         把该目录下所有.java文件写入到文件sources.txt
javac -d build @sources.txt            根据sources.txt里的文件名编译所有.java文件，
javac -d build -cp lib @sources.txt    编译时也可以使用-classpath指定classpath路径
java -classpath build com.A            运行要启动的类
java -classpath "./cp1;./cp2"          window使用;分隔，linux使用:分隔
jar -cvf jarName.jar build             把整个项目打包成jar
jar -cvf aa.jar -C build ./            去掉打包后的文件夹，保证打包后package是在root目录，也可以在build目录下打包，那么就不需要-C参数了